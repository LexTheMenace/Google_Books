{"version":3,"sources":["components/Navbar.js","context.js","components/BookList.js","components/SearchBar/SearchBar.js","components/savedBooks.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","isOpen","toggle","setState","color","dark","expand","NavbarBrand","href","Nav","className","navbar","NavItem","NavLink","Component","Context","React","createContext","reducer","action","type","book_list","payload","header","Provider","dispatch","axios","get","then","res","data","items","map","item","console","log","volumeInfo","imageLinks","thumbnail","catch","err","Consumer","BookList","saveBook","newBook","post","value","Fragment","Container","ListGroup","book","key","id","timeout","ListGroupItem","Card","CardImg","style","maxWidth","top","width","src","alt","CardBody","CardTitle","title","CardSubtitle","authors","CardText","description","previewLink","target","Button","onClick","link","SearchBar","searchTerms","onChange","e","name","searchTools","preventDefault","books","filter","savedBooks","handleDelete","delete","_id","componentDidMount","this","author","size","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0ddec68a.chunk.js","sourcesContent":["import React, { Component } from 'react'; \nimport {\n    Collapse,\n    Navbar as ReactNavbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container\n} from 'reactstrap';\n\n\n class Navbar extends Component {\n     state = {\n         isOpen: false\n     } \n     \n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        })\n    }\n    render() {\n        return(\n             <div>\n            <ReactNavbar color=\"dark\" dark expand=\"sm\">\n                    <NavbarBrand href=\"\"> Google Books </NavbarBrand>\n                    {/* <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar/> */}\n                    <Nav className='ml-auto' navbar>\n                        <NavItem>\n                            <NavLink href='/'>\n                                Search\n                            </NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/saved\">Saved</NavLink>\n                        </NavItem>\n                    </Nav>\n                    \n            </ReactNavbar>\n        </div>  \n        )\n    }\n}\n\nexport default Navbar","import React, { Component } from 'react'\nimport axios from 'axios';\n\n//Makes info available everywhere in the app\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n    switch(action.type){\n        case 'SEARCH_BOOKS': \n        return{\n            ...state,\n            book_list: action.payload,\n            header: \"Search Results\"\n        };\n        default: \n        return state;\n    }\n}\n\nexport class Provider extends Component {\n    state = {\n        book_list: [ ],\n        header: \"All Books\",\n        dispatch: action => this.setState(state => reducer(state, action))\n    };\n//Grabs from Db and this state\n /*    componentDidMount() {\n        axios.get('/api/books')\n            .then(res => {\n                console.log(res.data)\n            this.setState({book_list: [...this.state.book_list, res.data]})\n            console.log(this.state.book_list);\n            }) \n            .catch(err => console.log(err)) \n    } */\n    \n    componentDidMount() {\n        axios.get(`https://www.googleapis.com/books/v1/volumes?q=&key=AIzaSyDHagYFaIRvhhLUO1tCRVAjVhE3pX-6U2E`)\n            .then(res => {\n               res.data.items.map(item => {\n                    console.log(item);\n                        if (!item.volumeInfo.imageLinks.thumbnail) {\n                            item.volumeInfo.imageLinks.thumbnail = \"https://via.placeholder.com/150\"\n                            return item.volumeInfo.imageLinks.thumbnail                                                                  \n                        }  else {\n                            return item.volumeInfo.imageLinks.thumbnail\n                         }})\n            this.setState({book_list:res.data.items})\n            }) \n            .catch(err => console.log(err)) \n    }\n\n    render() {\n        return (\n            // passing state as value to access anywhere you bring this in\n        <Context.Provider value={this.state} >\n            {this.props.children}\n        </Context.Provider>\n        )\n    }\n}\n\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { Consumer } from '../context'\nimport axios from 'axios';\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle\n} from 'reactstrap';\nclass BookList extends Component {\n    //Move onclick function to here and add an axios.post to the books db!\n    saveBook = (newBook) => {\n        console.log(newBook);\n        axios.post(`api/books`, { newBook })\n            .then(res => {\n                console.log(\"Book Save Successful!\");\n                console.log(res.data);\n            })\n            .catch(err => console.log(err))\n    }\n\n\n    render() {\n        return (\n            <Consumer>\n                {value => {\n                    const { book_list } = value\n                    return (\n                        <React.Fragment>\n                            <Container>\n                                <h1>Results</h1>\n                                <ListGroup>\n                                    <TransitionGroup className='reading-list'>\n                                        {book_list.map(book => (\n                                            <CSSTransition key={book.id} timeout={500} className='dark'>\n                                                <ListGroupItem>\n                                                    <Card>\n                                                        <div className=\"row no-gutters\">\n                                                            <div className=\"col-md-4\">\n                                                                <CardImg \n                                                                    style={{maxWidth: '80%'}} \n                                                                    top width=\"100%\" \n                                                                    src={book.volumeInfo.imageLinks.thumbnail}\n                                                                    alt=\"Card image cap\" />\n                                                            </div>\n                                                            <div className=\"col-md-8\">\n                                                                <CardBody >\n                                                                    <CardTitle><h3>{book.volumeInfo.title}</h3></CardTitle>\n                                                                    <CardSubtitle>Written By: {book.volumeInfo.authors}</CardSubtitle>\n                                                                    <br/>\n                                                                    <CardText>Description: {book.volumeInfo.description}</CardText>\n                                                                    <CardText><a href={book.volumeInfo.previewLink} target='blank'> View on Google</a></CardText>\n                                                                    <Button\n                                                                        onClick={() => {\n                                                                            console.log();\n                                                                            const { title, description, authors, previewLink } = book.volumeInfo\n                                                                            const newBook = {\n                                                                                id: book.id,\n                                                                                title: title,\n                                                                                description: description,\n                                                                                authors: authors[0],\n                                                                                link: previewLink,\n                                                                                thumbnail: book.volumeInfo.imageLinks.thumbnail\n                                                                            }\n                                                                            this.saveBook(newBook)\n                                                                        }}>Save Book</Button>\n                                                                </CardBody>\n                                                            </div>\n                                                        </div>\n                                                    </Card>\n                                                </ListGroupItem>\n                                            </CSSTransition>\n                                        ))}\n                                    </TransitionGroup>\n                                </ListGroup>\n                            </Container>\n                        </React.Fragment>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\nexport default BookList;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Consumer} from '../../context';\n\nclass SearchBar extends Component {\n    state = {\n        searchTerms: ''\n    }\n    \n    onChange = (e) => {\n        const {value, name} = e.target\n        this.setState({ [name]: value});\n    }\n\n  //Searches DB by params in tools controller, seperate from findByID\n     searchTools = (dispatch, e) => {\n        e.preventDefault();\n\n        axios.get(`https://www.googleapis.com/books/v1/volumes?q=${this.state.searchTerms}&key=AIzaSyDHagYFaIRvhhLUO1tCRVAjVhE3pX-6U2E`)\n        .then(res => {\n            console.log(res);\n               const books = res.data.items.filter(item => item.volumeInfo.imageLinks)\n               this.setState({book_list: books})\n        dispatch({\n            type: 'SEARCH_BOOKS',\n            payload: books\n        })\n        }) \n        .catch(err => console.log(err))\n    }\n\n    render() {\n\n        return (\n            <Consumer>\n                {value => {\n                    //Bring in dispatch to bind to function to change our search results and heading\n                   const { dispatch } = value;\n                    return (\n                        // Can be changed to navbar category search to ensure results?\n                        <div className='search-bar'>\n                            <h1> Search for Books! </h1>\n\n                            <form  onSubmit={this.searchTools.bind(this, dispatch)}>\n                              <div className='form-group'>\n                                <input \n                                type=\"text\" \n                                placeholder=\"\"\n                                name=\"searchTerms\"\n                                className=\"form-control-file\"\n                                value={this.state.searchTerms}\n                                onChange={this.onChange}\n                                ></input>\n                                <button className=\"btn btn-dark\" type='submit' style={{padding: \"10px\", marginTop: '10px'}}>Get Books!</button>  \n                              </div>\n                                \n                            </form>\n                        </div>\n                    );\n\n                }}\n            </Consumer>\n        )\n    }\n}\n\nexport default SearchBar\n","import React, { Component } from 'react';\nimport {\n    Container, ListGroup, ListGroupItem, Button, Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle\n} from 'reactstrap'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport axios from 'axios';\n\nclass savedBooks extends Component {\n    state = {\n        savedBooks: []\n    }\n\n    //Move onclick function to here and add an axios.post to the books db!\n    componentDidMount() {\n        axios.get(`api/books`)\n            .then(res => {\n                console.log(res);\n                const savedBooks = res.data\n                this.setState({ savedBooks })\n            })\n            .catch(err => console.log(err))\n    }\n\n      handleDelete = (book) => {\n         axios.delete(`api/books/${book._id}`)\n             .then(res => {\n                 console.log(\"DELETED\");\n                 console.log(res.data);\n                 this.componentDidMount()\n             })\n             .catch(err => console.log(err))\n     }\n  \n    render() {\n        return (\n            <React.Fragment>\n                <Container>\n                    <ListGroup>\n                        <TransitionGroup className='reading-list'>\n                            {this.state.savedBooks.map(book => (\n                                <CSSTransition key={book.id} timeout={500} className='dark'>\n                                    <ListGroupItem>\n                                        <Card>\n                                            <div className=\"row no-gutters\">\n                                                <div className=\"col-md-4\">\n                                                    <CardImg style={{maxWidth: '80%'}} top width=\"100%\" src={book.thumbnail} alt=\"Card image cap\" />\n                                                </div>\n                                                <div className=\"col-md-8\">\n                                                    <CardBody >\n                                                        <CardTitle><h3>{book.title}</h3> </CardTitle>\n                                                        <CardSubtitle>Author: {book.author}</CardSubtitle>\n                                                        <CardText>Description: {book.description}</CardText>\n                                                        <CardText><a href={book.link} target='blank'> View on Google</a></CardText>\n                                                    </CardBody>\n                                                </div>\n                                            </div>\n                                               <Button\n                                            className='remove-btn'\n                                            color='danger'\n                                            size='sm'\n                                         onClick={() => {\n                                           this.handleDelete(book)\n                                         }\n                                           }\n                                        >REMOVE THIS BOOK</Button>\n                                        </Card>\n                                     \n                                    </ListGroupItem>\n                                </CSSTransition>\n                            ))}\n                        </TransitionGroup>\n                    </ListGroup>\n                </Container>\n            </React.Fragment>\n\n        )\n    }\n}\nexport default savedBooks;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from './components/Navbar'\nimport BookList from './components/BookList'\nimport { Provider } from './context'\nimport SearchBar from './components/SearchBar/SearchBar';\nimport SavedBooks from './components/savedBooks';\nimport { BrowserRouter as Router, Switch, Route, Link}  from 'react-router-dom'\nfunction App() {\n  return (\n    <Provider >\n       <div className=\"App\">\n      <Navbar/>\n      <div className='container'>\n       \n      \n      \n    <Router>\n      <Switch>\n        <Route exact path='/saved'>\n           <SavedBooks/>\n        </Route>\n        <Route path='*'>\n          <SearchBar/> \n        <BookList/>\n          </Route> \n      </Switch>\n    </Router>\n     </div>\n    </div>\n    </Provider>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}