{"version":3,"sources":["components/Navbar.js","context.js","components/BookList.js","components/SearchBar/SearchBar.js","components/savedBooks.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","isOpen","toggle","setState","color","dark","expand","NavbarBrand","href","Nav","className","navbar","NavItem","NavLink","Component","Context","React","createContext","reducer","action","type","book_list","payload","header","Provider","dispatch","axios","get","then","res","data","items","map","item","console","log","volumeInfo","imageLinks","thumbnail","catch","err","Consumer","BookList","saveBook","newBook","post","value","Fragment","Container","ListGroup","book","key","id","timeout","ListGroupItem","Card","CardImg","style","maxWidth","top","width","src","alt","CardBody","CardTitle","title","CardSubtitle","authors","CardText","description","previewLink","target","Button","onClick","link","SearchBar","searchTerms","onChange","e","name","searchTools","preventDefault","books","filter","savedBooks","handleDelete","delete","_id","componentDidMount","this","author","size","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.91ab1a18.chunk.js","sourcesContent":["import React, { Component } from 'react'; \r\nimport {\r\n    Collapse,\r\n    Navbar as ReactNavbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container\r\n} from 'reactstrap';\r\n\r\n\r\n class Navbar extends Component {\r\n     state = {\r\n         isOpen: false\r\n     } \r\n     \r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n             <div>\r\n            <ReactNavbar color=\"dark\" dark expand=\"sm\">\r\n                    <NavbarBrand href=\"\"> Google Books </NavbarBrand>\r\n                    {/* <NavbarToggler onClick={this.toggle}/>\r\n                    <Collapse isOpen={this.state.isOpen} navbar/> */}\r\n                    <Nav className='ml-auto' navbar>\r\n                        <NavItem>\r\n                            <NavLink href='/'>\r\n                                Search\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/saved\">Saved</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    \r\n            </ReactNavbar>\r\n        </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n\r\n//Makes info available everywhere in the app\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'SEARCH_BOOKS': \r\n        return{\r\n            ...state,\r\n            book_list: action.payload,\r\n            header: \"Search Results\"\r\n        };\r\n        default: \r\n        return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        book_list: [ ],\r\n        header: \"All Books\",\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    };\r\n//Grabs from Db and this state\r\n /*    componentDidMount() {\r\n        axios.get('/api/books')\r\n            .then(res => {\r\n                console.log(res.data)\r\n            this.setState({book_list: [...this.state.book_list, res.data]})\r\n            console.log(this.state.book_list);\r\n            }) \r\n            .catch(err => console.log(err)) \r\n    } */\r\n    \r\n    componentDidMount() {\r\n        axios.get(`https://www.googleapis.com/books/v1/volumes?q=&key=AIzaSyDHagYFaIRvhhLUO1tCRVAjVhE3pX-6U2E`)\r\n            .then(res => {\r\n               res.data.items.map(item => {\r\n                    console.log(item);\r\n                        if (!item.volumeInfo.imageLinks.thumbnail) {\r\n                            item.volumeInfo.imageLinks.thumbnail = \"https://via.placeholder.com/150\"\r\n                            return item.volumeInfo.imageLinks.thumbnail                                                                  \r\n                        }  else {\r\n                            return item.volumeInfo.imageLinks.thumbnail\r\n                         }})\r\n            this.setState({book_list:res.data.items})\r\n            }) \r\n            .catch(err => console.log(err)) \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // passing state as value to access anywhere you bring this in\r\n        <Context.Provider value={this.state} >\r\n            {this.props.children}\r\n        </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { Consumer } from '../context'\r\nimport axios from 'axios';\r\nimport {\r\n    Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle\r\n} from 'reactstrap';\r\nclass BookList extends Component {\r\n    //Move onclick function to here and add an axios.post to the books db!\r\n    saveBook = (newBook) => {\r\n        console.log(newBook);\r\n        axios.post(`api/books`, { newBook })\r\n            .then(res => {\r\n                console.log(\"Book Save Successful!\");\r\n                console.log(res.data);\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { book_list } = value\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Container>\r\n                                <h1>Results</h1>\r\n                                <ListGroup>\r\n                                    <TransitionGroup className='reading-list'>\r\n                                        {book_list.map(book => (\r\n                                            <CSSTransition key={book.id} timeout={500} className='dark'>\r\n                                                <ListGroupItem>\r\n                                                    <Card>\r\n                                                        <div className=\"row no-gutters\">\r\n                                                            <div className=\"col-md-4\">\r\n                                                                <CardImg \r\n                                                                    style={{maxWidth: '80%'}} \r\n                                                                    top width=\"100%\" \r\n                                                                    src={book.volumeInfo.imageLinks.thumbnail}\r\n                                                                    alt=\"Card image cap\" />\r\n                                                            </div>\r\n                                                            <div className=\"col-md-8\">\r\n                                                                <CardBody >\r\n                                                                    <CardTitle><h3>{book.volumeInfo.title}</h3></CardTitle>\r\n                                                                    <CardSubtitle>Written By: {book.volumeInfo.authors}</CardSubtitle>\r\n                                                                    <br/>\r\n                                                                    <CardText>Description: {book.volumeInfo.description}</CardText>\r\n                                                                    <CardText><a href={book.volumeInfo.previewLink} target='blank'> View on Google</a></CardText>\r\n                                                                    <Button\r\n                                                                        onClick={() => {\r\n                                                                            console.log();\r\n                                                                            const { title, description, authors, previewLink } = book.volumeInfo\r\n                                                                            const newBook = {\r\n                                                                                id: book.id,\r\n                                                                                title: title,\r\n                                                                                description: description,\r\n                                                                                authors: authors[0],\r\n                                                                                link: previewLink,\r\n                                                                                thumbnail: book.volumeInfo.imageLinks.thumbnail\r\n                                                                            }\r\n                                                                            this.saveBook(newBook)\r\n                                                                        }}>Save Book</Button>\r\n                                                                </CardBody>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Card>\r\n                                                </ListGroupItem>\r\n                                            </CSSTransition>\r\n                                        ))}\r\n                                    </TransitionGroup>\r\n                                </ListGroup>\r\n                            </Container>\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BookList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Consumer} from '../../context';\r\n\r\nclass SearchBar extends Component {\r\n    state = {\r\n        searchTerms: ''\r\n    }\r\n    \r\n    onChange = (e) => {\r\n        const {value, name} = e.target\r\n        this.setState({ [name]: value});\r\n    }\r\n\r\n  //Searches DB by params in tools controller, seperate from findByID\r\n     searchTools = (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        axios.get(`https://www.googleapis.com/books/v1/volumes?q=${this.state.searchTerms}&key=AIzaSyDHagYFaIRvhhLUO1tCRVAjVhE3pX-6U2E`)\r\n        .then(res => {\r\n            console.log(res);\r\n               const books = res.data.items.filter(item => item.volumeInfo.imageLinks)\r\n               this.setState({book_list: books})\r\n        dispatch({\r\n            type: 'SEARCH_BOOKS',\r\n            payload: books\r\n        })\r\n        }) \r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    //Bring in dispatch to bind to function to change our search results and heading\r\n                   const { dispatch } = value;\r\n                    return (\r\n                        // Can be changed to navbar category search to ensure results?\r\n                        <div className='search-bar'>\r\n                            <h1> Search for Books! </h1>\r\n\r\n                            <form  onSubmit={this.searchTools.bind(this, dispatch)}>\r\n                              <div className='form-group'>\r\n                                <input \r\n                                type=\"text\" \r\n                                placeholder=\"\"\r\n                                name=\"searchTerms\"\r\n                                className=\"form-control-file\"\r\n                                value={this.state.searchTerms}\r\n                                onChange={this.onChange}\r\n                                ></input>\r\n                                <button className=\"btn btn-dark\" type='submit' style={{padding: \"10px\", marginTop: '10px'}}>Get Books!</button>  \r\n                              </div>\r\n                                \r\n                            </form>\r\n                        </div>\r\n                    );\r\n\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { Component } from 'react';\r\nimport {\r\n    Container, ListGroup, ListGroupItem, Button, Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle\r\n} from 'reactstrap'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport axios from 'axios';\r\n\r\nclass savedBooks extends Component {\r\n    state = {\r\n        savedBooks: []\r\n    }\r\n\r\n    //Move onclick function to here and add an axios.post to the books db!\r\n    componentDidMount() {\r\n        axios.get(`api/books`)\r\n            .then(res => {\r\n                console.log(res);\r\n                const savedBooks = res.data\r\n                this.setState({ savedBooks })\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n      handleDelete = (book) => {\r\n         axios.delete(`api/books/${book._id}`)\r\n             .then(res => {\r\n                 console.log(\"DELETED\");\r\n                 console.log(res.data);\r\n                 this.componentDidMount()\r\n             })\r\n             .catch(err => console.log(err))\r\n     }\r\n  \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Container>\r\n                    <ListGroup>\r\n                        <TransitionGroup className='reading-list'>\r\n                            {this.state.savedBooks.map(book => (\r\n                                <CSSTransition key={book.id} timeout={500} className='dark'>\r\n                                    <ListGroupItem>\r\n                                        <Card>\r\n                                            <div className=\"row no-gutters\">\r\n                                                <div className=\"col-md-4\">\r\n                                                    <CardImg style={{maxWidth: '80%'}} top width=\"100%\" src={book.thumbnail} alt=\"Card image cap\" />\r\n                                                </div>\r\n                                                <div className=\"col-md-8\">\r\n                                                    <CardBody >\r\n                                                        <CardTitle><h3>{book.title}</h3> </CardTitle>\r\n                                                        <CardSubtitle>Author: {book.author}</CardSubtitle>\r\n                                                        <CardText>Description: {book.description}</CardText>\r\n                                                        <CardText><a href={book.link} target='blank'> View on Google</a></CardText>\r\n                                                    </CardBody>\r\n                                                </div>\r\n                                            </div>\r\n                                               <Button\r\n                                            className='remove-btn'\r\n                                            color='danger'\r\n                                            size='sm'\r\n                                         onClick={() => {\r\n                                           this.handleDelete(book)\r\n                                         }\r\n                                           }\r\n                                        >REMOVE THIS BOOK</Button>\r\n                                        </Card>\r\n                                     \r\n                                    </ListGroupItem>\r\n                                </CSSTransition>\r\n                            ))}\r\n                        </TransitionGroup>\r\n                    </ListGroup>\r\n                </Container>\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\nexport default savedBooks;","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Navbar from './components/Navbar'\r\nimport BookList from './components/BookList'\r\nimport { Provider } from './context'\r\nimport SearchBar from './components/SearchBar/SearchBar';\r\nimport SavedBooks from './components/savedBooks';\r\nimport { BrowserRouter as Router, Switch, Route, Link}  from 'react-router-dom'\r\nfunction App() {\r\n  return (\r\n    <Provider >\r\n       <div className=\"App\">\r\n      <Navbar/>\r\n      <div className='container'>\r\n       \r\n      \r\n      \r\n    <Router>\r\n      <Switch>\r\n        <Route exact path='/saved'>\r\n           <SavedBooks/>\r\n        </Route>\r\n        <Route path='*'>\r\n          <SearchBar/> \r\n        <BookList/>\r\n          </Route> \r\n      </Switch>\r\n    </Router>\r\n     </div>\r\n    </div>\r\n    </Provider>\r\n   \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}